(file_input (entry (stmt (assn_stmt integer := (expr (term (factor 100))))) ;) (entry (stmt (assn_stmt float := (expr (term (factor 45.10))))) ;) (entry (stmt (assn_stmt floatPtBegin := (expr (term (factor .123))))) ;) (entry (stmt (assn_stmt floatPtEnd := (expr (term (factor 500.))))) ;) (entry (funcdef fun callMe (arglist ( )) (block_stmt (stmt (return_stmt return (expr (term (factor 42))))) ;) endf) ;) (entry (stmt (assn_stmt expr := (expr (expr (expr (expr (term (factor integer))) + (term (factor 30))) - (term (factor ( (expr (term (term (term (factor 444)) * (factor 10)) / (factor 2.))) )))) + (term (factor (funccall callMe (arglist_call ( )))))))) ;) (entry (funcdef fUn CAseInSEnsITivE (arglist ( x , y , z )) (block_stmt (stmt (return_stmt rETUrn (expr (expr (expr (term (factor x))) + (term (factor y))) + (term (factor z))))) ;) eNdf) ;) (entry (stmt (assn_stmt foo := (expr (term (factor (funccall caseInsensitive (arglist_call ( (expr (term (factor 1))) , (expr (term (factor (funccall CALLME (arglist_call ( )))))) , (expr (term (factor integer))) )))))))) ;) (entry (stmt (while_stmt while (cond_expr (expr (term (factor foo))) (comp_op >) (expr (term (factor 0)))) (block_stmt (stmt (assn_stmt bar := (expr (term (factor 10))))) ; (stmt (assn_stmt baz := (expr (term (factor 11.1))))) ; (stmt (assn_stmt qux := (expr (term (factor 20.0))))) ; (stmt (io_stmt input quux)) ; (stmt (if_stmt if (cond_expr (cond_expr (expr (term (factor baz))) (comp_op >) (expr (term (factor 3)))) or (cond_expr ! (cond_expr (expr (term (factor quux))) (comp_op <=) (expr (term (factor 10)))))) (block_stmt (stmt (io_stmt output baz)) ;) (else_block else (block_stmt (stmt (assn_stmt quuz := (expr (term (factor 1))))) ; (stmt (assn_stmt garply := (expr (term (factor 2))))) ; (stmt (assn_stmt waldo := (expr (term (factor 3))))) ; (stmt (if_stmt if (cond_expr (cond_expr (cond_expr (expr (term (factor quuz))) (comp_op <) (expr (term (factor 5)))) and (cond_expr (expr (term (factor corge))) (comp_op >=) (expr (term (factor 3))))) or (cond_expr (expr (term (factor garply))) (comp_op ==) (expr (term (factor waldo))))) (block_stmt (stmt (return_stmt return (expr (term (factor bar))))) ;) endi)) ;)) endi)) ; (stmt (assn_stmt foo := (expr (expr (term (factor foo))) - (term (factor 1))))) ;) endw)) ;) (entry (stmt (assn_stmt grault := (expr (term (factor 10))))) ;) (entry (stmt (return_stmt return (expr (term (factor grault))))) ;) <EOF>)
