(file_input (entry (funcdef fun foo (arglist ( a )) (block_stmt (stmt (return_stmt return (expr (term (factor a))))) ;) endf) ;) (entry (stmt (assn_stmt x := (expr (term (factor 3))))) ;) (entry (stmt (assn_stmt y := (expr (term (factor 5))))) ;) (entry (stmt (assn_stmt z := (expr (term (factor 7))))) ;) (entry (stmt (if_stmt if (cond_expr (cond_expr (cond_expr ( (cond_expr (expr (term (factor x))) (comp_op ==) (expr (term (factor y)))) )) or (cond_expr ( (cond_expr (expr (term (factor y))) (comp_op ==) (expr (term (factor z)))) ))) or (cond_expr ( (cond_expr (expr (term (factor x))) (comp_op ==) (expr (term (factor z)))) ))) (block_stmt (stmt (assn_stmt result := (expr (term (factor (funccall foo (arglist_call ( (expr (term (factor (funccall foo (arglist_call ( (expr (term (factor (funccall foo (arglist_call ( (expr (term (factor z))) )))))) )))))) )))))))) ;) endi)) ;) (entry (stmt (if_stmt if (cond_expr (cond_expr (cond_expr (expr (term (factor x))) (comp_op ==) (expr (term (factor 0)))) and (cond_expr (expr (term (factor y))) (comp_op ==) (expr (term (factor 0))))) or (cond_expr (expr (term (factor z))) (comp_op ==) (expr (term (factor 0))))) (block_stmt (stmt (assn_stmt result := (expr (expr (term (factor result))) + (term (factor 1))))) ;) endi)) ;) (entry (stmt (if_stmt if (cond_expr (cond_expr (cond_expr (expr (term (factor x))) (comp_op ==) (expr (term (factor 0)))) or (cond_expr (expr (term (factor x))) (comp_op ==) (expr (term (factor 1))))) or (cond_expr (expr (term (factor x))) (comp_op ==) (expr (term (factor 2))))) (block_stmt (stmt (assn_stmt result := (expr (expr (term (factor result))) + (term (factor 2))))) ;) endi)) ;) (entry (stmt (io_stmt output result)) ;) (entry (stmt (return_stmt return (expr (term (factor 0))))) ;) <EOF>)
